/*
0.char vc编译器默认是signed char，范围为[-128,127],unsigned char [0,255]
1.无论是参数传递（如-1--->unsigned int =2^32-1），赋值运算，其他运算均是以补码形式（正数的补码就是原码，负数的补码为符号位不变，原码取反加一）进行的，再以原码对应的数值进行显示的。
2.短字节类型转长字节类型：如char，uchar--->int ,uint,补码的高字节！！负char补1，正全补0.！！与转变为是否有符号的int无关。如17,19的区别
3.十六进制如，0x80便是无符号,%x 均表示转为！！无符号int型再输出十六进制数。但%d表示转为！！有符号int再输出十进制如char -1--%d--->-1
4.有符号char 补码1000 0000,--->1111 1111 +1---->1000 0000
*/


#include <stdio.h>  

void f(unsigned char v)//0x80，1000 0000给的是无符号，其补码也是1000 0000，赋给uchar v。那么uchar v的补码等于1000 0000

{

	char c = v;//char c补码等于v的补码，1000 0000.那么c的原码为1000 0000（1 111 1111+1）

	unsigned char uc = v;//uchar uc补码为v的补码，1000 0000.uchar uc 原码等于反码，为 1000 0000。

	unsigned int a = c, b = uc;//uint a 的补码为c的补码1000 0000的高2字节全补1，即1111 1111 1000 0000，其原码等于补码。
							//uint b 的补码为uc的补码1000 0000的高2字节全补0，即0000 0000 1000 0000，其原码等于补码。
	int i = c, j = uc;///uint a 的补码为c的补码1000 0000的高2字节全补1，即1111 1111 1000 0000，其原码等于补码d的补码，为1000 0000 0111 1111+1。
					//uint b 的补码为c的补码1000 0000的高2字节全补0，即0000 0000 1000 0000，其原码等于补码的补码0000 0000 0111 1111 +1。

	printf("----------------\n");

	printf("%%c: %c, %c\n", c, uc);//???输出有符号char，1000 0000的补码为1000 0000对应的字符为？？

	printf("%%X: %X, %X\n", c, uc);//以无符号int十六进制不带ox输出，c的补码 1000 0000--->1111 1111 1111 1111 1111 1111 1000 0000--->FF FF FF 80
									//ucd的补码1000 0000--->0000 0000 0000 0000 0000 0000 0000 1000 0000---->80

	printf("%%u: %u, %u\n", a, b);//以无符号int输出：c的补码 1000 0000--->1111 1111 1111 1111 1111 1111 1000 0000---->4294967168
								//ucd的补码1000 0000--->0000 0000 0000 0000 0000 0000 0000 1000 0000---->128
	printf("%%d: %d, %d\n", i, j);//以有符号int输出：c的补码 1000 0000--->1111 1111 1111 1111 1111 1111 1000 0000---->1000 0000 0000 0000 0000 0000 0111 1111+1-->-128
			//正数的补码就是原码//ucd的补码1000 0000--->0000 0000 0000 0000 0000 0000 0000 1000 0000---->00000 0000 0000 0000 0000 0000 0000 1000 0000-->128

}

int main(int argc, char *argv[])

{

	f(0x80);

	f(0x7F);

	return 0;


		//char a = -1;
		//signed char b = -1;
		//unsigned char c = -1;//-1,原码1000 0001-->补码1111 1111-->uchar c的补码等于-1的补码，c的原码等于自己的补码--->

		//printf("a=%d,b=%d,c=%d\n", a, b, c);//c转为有符号int 十进制输出，即c的补码1111 1111--->转为有符号int的补码0000 0000 0000 0000 0000 0000 1111 1111--->
	//正数的原码等于补码为，0000 0000 0000 0000 0000 0000 1111 1111=255
		//return 0;
	

}

