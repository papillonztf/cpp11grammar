#volatile关键字
>原理：
    volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器
    未知的因素更改，比如：操作系统、硬件或者其它线程等。
    遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，
    从而可以提供对特殊地址的稳定访问.
    (如debug模式下编译器不对代码进行优化，那么cpu始终从内存取变量值;
     如release模式下编译器对代码进程优化，cpu则从已暂存变量值的寄存器取值，
     这种优化虽然可以加快指令执行速度，但在多线程、嵌入式编程时，由于未能及时
     取得变量当前值(内存值)可能导致运行时错误。)
>作用：
    >多线程时保证共享变量(非栈区变量)的可见性：
        eg：
            int i;
            thread 1：
                i=1;    //s2
            thread 2：
                i=2;    //s1
                int j=i;//s3，此时i从该线程的寄存器取值2而不是取线程2的i=1赋值给j
                //将int i;改为volatile int i，那此处就从内存取线程2的i=1赋值给j
        //for(;i<10;i++)循环中，对nMyCounter的测试及操作总是对此寄存器中的值进行
            

   
